#pragma once
#include "bitboard.hpp"


namespace anka {
	namespace attacks {
		namespace magics {
			struct Magic {
				u64 mask;
				u64 magic_factor;
				int table_offset;
			};

			inline constexpr Magic rook_magics[64] =
			{
				{ 0x101010101017e, 0x4d80004000881020,  33467 },
				{ 0x202020202027c, 0x20000800100020,  46779 },
				{ 0x404040404047a, 0x8040080040100004,  66089 },
				{ 0x8080808080876, 0x40080040040002,  96140 },
				{ 0x1010101010106e, 0x40040040020001,  87451 },
				{ 0x2020202020205e, 0x8020014390200088,  52923 },
				{ 0x4040404040403e, 0x40008001000040,  58994 },
				{ 0x8080808080807e, 0x2880010010482080,  48827 },
				{ 0x1010101017e00, 0x1080010040100,  13656 },
				{ 0x2020202027c00, 0x240100400080010,  79259 },
				{ 0x4040404047a00, 0x4000100200040010,  99212 },
				{ 0x8080808087600, 0x8000200400200200,  62066 },
				{ 0x10101010106e00, 0x4000200200010020,  45755 },
				{ 0x20202020205e00, 0x200100008020,  37563 },
				{ 0x40404040403e00, 0x8100200040008020,  98188 },
				{ 0x80808080807e00, 0x81081008020020,  7320 },
				{ 0x10101017e0100, 0x7040002000100020,  69673 },
				{ 0x20202027c0200, 0x2104001000080010,  82331 },
				{ 0x40404047a0400, 0x4c04000802010008,  85403 },
				{ 0x8080808760800, 0x8002002004002002,  38587 },
				{ 0x101010106e1000, 0x801002002002001,  78235 },
				{ 0x202020205e2000, 0x481002000802001,  24379 },
				{ 0x404040403e4000, 0x8801020004010,  84379 },
				{ 0x808080807e8000, 0x2000008806288801,  90523 },
				{ 0x101017e010100, 0x6000100108040100,  9432 },
				{ 0x202027c020200, 0x80010040011,  94092 },
				{ 0x404047a040400, 0x4020008010008,  43707 },
				{ 0x8080876080800, 0x20020040020,  25403 },
				{ 0x1010106e101000, 0x800020020010020,  31419 },
				{ 0x2020205e202000, 0x1c50010020008020,  77211 },
				{ 0x4040403e404000, 0x480400040008001,  86427 },
				{ 0x8080807e808000, 0x2000200244f0,  63090 },
				{ 0x1017e01010100, 0x40001000200020,  55922 },
				{ 0x2027c02020200, 0x1404000800100010,  81307 },
				{ 0x4047a04040400, 0x84010200080008,  89499 },
				{ 0x8087608080800, 0x1002000400202002,  108940 },
				{ 0x10106e10101000, 0x810200200200100,  57970 },
				{ 0x20205e20202000, 0x80200080200100,  61042 },
				{ 0x40403e40404000, 0x200080200040,  26427 },
				{ 0x80807e80808000, 0x2030f02000200a40,  74186 },
				{ 0x17e0101010100, 0x1001040010010804,  11544 },
				{ 0x27c0202020200, 0x401020088008400,  19385 },
				{ 0x47a0404040400, 0x4000a01000800,  68137 },
				{ 0x8760808080800, 0x800040002002020,  44731 },
				{ 0x106e1010101000, 0x10002002020,  107916 },
				{ 0x205e2020202000, 0x408010000802020,  32443 },
				{ 0x403e4040404000, 0x44004000802020,  93068 },
				{ 0x807e8080808000, 0x3000020026011009,  20810 },
				{ 0x7e010101010100, 0x440002000100020,  101772 },
				{ 0x7c020202020200, 0x8410020400080008,  100748 },
				{ 0x7a040404040400, 0x1004010008020008,  80283 },
				{ 0x76080808080800, 0x2440200200040020,  23355 },
				{ 0x6e101010101000, 0x900010020020020,  109964 },
				{ 0x5e202020202000, 0x200100008020,  95116 },
				{ 0x3e404040404000, 0x408200040008020,  83355 },
				{ 0x7e808080808000, 0x840a00a54200020,  71721 },
				{ 0x7e01010101010100, 0x2004020110082,  39611 },
				{ 0x7c02020202020200, 0x600810020081041,  15881 },
				{ 0x7a04040404040400, 0x104004082082,  27451 },
				{ 0x7608080808080800, 0x4804402008100402,  104076 },
				{ 0x6e10101010101000, 0x2002100208000401,  103820 },
				{ 0x5e20202020202000, 0x808048004780201,  0 },
				{ 0x3e40404040404000, 0x84004200040081,  3832 },
				{ 0x7e80808080808000, 0x50482104084092,  110988 }
			};
			inline constexpr Magic bishop_magics[64] =
			{
				{ 0x40201008040200, 0x100414040610842,  28859 },
				{ 0x402010080400, 0x1100802141002081,  16634 },
				{ 0x4020100a00, 0x3081010028800002,  3826 },
				{ 0x40221400, 0x4801101020000860,  20914 },
				{ 0x2442800, 0x4000808402000400,  30908 },
				{ 0x204085000, 0x80240108080000,  31164 },
				{ 0x20408102000, 0x401210100808c30,  30907 },
				{ 0x2040810204000, 0x9000090080840060,  29627 },
				{ 0x20100804020000, 0x100810141020080,  3954 },
				{ 0x40201008040000, 0x10020220408049,  16138 },
				{ 0x4020100a0000, 0x200040010204800,  19113 },
				{ 0x4022140000, 0x9000808820820a00,  25 },
				{ 0x244280000, 0x40220808400044c,  16378 },
				{ 0x20408500000, 0x4108804004,  782 },
				{ 0x2040810200000, 0x20008201410060,  28603 },
				{ 0x4081020400000, 0x54f00030c0814230,  64872 },
				{ 0x10080402000200, 0x1000401001015100,  2043 },
				{ 0x20100804000400, 0x400206002022,  3049 },
				{ 0x4020100a000a00, 0x2000410200810004,  30651 },
				{ 0x402214001400, 0x220200801100,  28091 },
				{ 0x24428002800, 0x80c0004c025008,  75282 },
				{ 0x2040850005000, 0x40080080840088,  27835 },
				{ 0x4081020002000, 0x8081205041004040,  5753 },
				{ 0x8102040004000, 0xc04100040402421,  16762 },
				{ 0x8040200020400, 0x108018808010100,  3839 },
				{ 0x10080400040800, 0xc002090200410020,  5816 },
				{ 0x20100a000a1000, 0x2301004000808100,  27579 },
				{ 0x40221400142200, 0x8044004004010003,  75473 },
				{ 0x2442800284400, 0x1010003104000,  64360 },
				{ 0x4085000500800, 0x1800108000404041,  28347 },
				{ 0x8102000201000, 0x8000208800420083,  18825 },
				{ 0x10204000402000, 0x100046000090043,  29371 },
				{ 0x4020002040800, 0x4a02009241020120,  7 },
				{ 0x8040004081000, 0x1081404200080020,  19241 },
				{ 0x100a000a102000, 0x2108420200004011,  3176 },
				{ 0x22140014224000, 0x8100840400080120,  54098 },
				{ 0x44280028440200, 0x840404040140100,  99724 },
				{ 0x8500050080400, 0x204040008021,  54610 },
				{ 0x10200020100800, 0x40810a002100,  16764 },
				{ 0x20400040201000, 0x1902001043401042,  2800 },
				{ 0x2000204081000, 0x800820180801000,  3969 },
				{ 0x4000408102000, 0x184080208a000030,  1465 },
				{ 0xa000a10204000, 0x80210100820040,  68521 },
				{ 0x14001422400000, 0x1840400162,  64169 },
				{ 0x28002844020000, 0x8000020040108100,  5624 },
				{ 0x50005008040200, 0x104080020400008,  30139 },
				{ 0x20002010080400, 0x301002081100080,  18697 },
				{ 0x40004020100800, 0x4010048112008,  2185 },
				{ 0x20408102000, 0x8800108404028000,  5374 },
				{ 0x40810204000, 0x1410802101404801,  16250 },
				{ 0xa1020400000, 0x882808000,  937 },
				{ 0x142240000000, 0x2340024010808042,  68266 },
				{ 0x284402000000, 0x480808100,  2176 },
				{ 0x500804020000, 0xb088080808000,  18857 },
				{ 0x201008040200, 0x14008080108004,  928 },
				{ 0x402010080400, 0x44401240440400,  30395 },
				{ 0x2040810204000, 0x884804042008080,  18985 },
				{ 0x4081020400000, 0x1921008041,  31163 },
				{ 0xa102040000000, 0x200a0048420081,  16506 },
				{ 0x14224000000000, 0x2058108080,  68265 },
				{ 0x28440200000000, 0x410048008408050,  29115 },
				{ 0x50080402000000, 0x80244500b,  29883 },
				{ 0x20100804020000, 0x2002080200920810,  5752 },
				{ 0x40201008040200, 0x200880200802008,  3040 }
			};


		} // namespace magics


		extern Bitboard _slider_attacks[115084];
		extern Bitboard _knight_attacks[64];
		extern Bitboard _king_attacks[64];
		extern Bitboard _pawn_attacks[2][64];
		extern Bitboard _in_between[64][64];

		void InitAttacks();
		Bitboard RookAttacksSlow(Square sq, Bitboard relevant_occ);
		Bitboard BishopAttacksSlow(Square sq, Bitboard relevant_occ);

		template <int side>
		force_inline Bitboard PawnAttacks(Square sq)
		{
			return _pawn_attacks[side][sq];
		}

		force_inline Bitboard PawnAttacks(Square sq, Side attacking_side)
		{
			return _pawn_attacks[attacking_side][sq];
		}

		// returns the attack map for a knight on the given square
		force_inline Bitboard KnightAttacks(Square sq)
		{
			return _knight_attacks[sq];
		}

		// returns the attack map for a king on the given square
		force_inline Bitboard KingAttacks(Square sq)
		{
			return _king_attacks[sq];
		}

		force_inline Bitboard BishopAttacks(Square square, u64 occupancy)
		{
			occupancy &= magics::bishop_magics[square].mask;
			occupancy *= magics::bishop_magics[square].magic_factor;
			occupancy >>= (64 - 9);
			return _slider_attacks[magics::bishop_magics[square].table_offset + occupancy];
		}

		force_inline Bitboard RookAttacks(Square square, u64 occupancy)
		{
			occupancy &= magics::rook_magics[square].mask;
			occupancy *= magics::rook_magics[square].magic_factor;
			occupancy >>= (64 - 12);
			return _slider_attacks[magics::rook_magics[square].table_offset + occupancy];
		}

		force_inline Bitboard QueenAttacks(Square square, u64 occupancy)
		{
			return BishopAttacks(square, occupancy) | RookAttacks(square, occupancy);
		}

		force_inline Bitboard InBetween(Square from, Square to)
		{
			return _in_between[from][to];
		}

	} // namespace attacks
} // namespace anka