#pragma once
#include "bitboard.hpp"


namespace anka {
	namespace attacks {
		namespace magics {
			struct Magic {
				u64 mask;
				u64 magic_factor;
				int table_offset;
			};

			// Magic factors shared by Volker Annuss 
			// source: http://www.talkchess.com/forum3/viewtopic.php?t=60065&start=14
			inline constexpr Magic bishop_magics[64] =
			{
				{ 0x0040201008040200, 0x0000404040404040u,  33104 },
				{ 0x0000402010080400, 0x0000a060401007fcu,   4094 },
				{ 0x0000004020100a00, 0x0000401020200000u,  24764 },
				{ 0x0000000040221400, 0x0000806004000000u,  13882 },
				{ 0x0000000002442800, 0x0000440200000000u,  23090 },
				{ 0x0000000204085000, 0x0000080100800000u,  32640 },
				{ 0x0000020408102000, 0x0000104104004000u,  11558 },
				{ 0x0002040810204000, 0x0000020020820080u,  32912 },
				{ 0x0020100804020000, 0x0000040100202004u,  13674 },
				{ 0x0040201008040000, 0x0000020080200802u,   6109 },
				{ 0x00004020100a0000, 0x0000010040080200u,  26494 },
				{ 0x0000004022140000, 0x0000008060040000u,  17919 },
				{ 0x0000000244280000, 0x0000004402000000u,  25757 },
				{ 0x0000020408500000, 0x00000021c100b200u,  17338 },
				{ 0x0002040810200000, 0x0000000400410080u,  16983 },
				{ 0x0004081020400000, 0x000003f7f05fffc0u,  16659 },
				{ 0x0010080402000200, 0x0004228040808010u,  13610 },
				{ 0x0020100804000400, 0x0000200040404040u,   2224 },
				{ 0x004020100a000a00, 0x0000400080808080u,  60405 },
				{ 0x0000402214001400, 0x0000200200801000u,   7983 },
				{ 0x0000024428002800, 0x0000240080840000u,     17 },
				{ 0x0002040850005000, 0x000018000c03fff8u,  34321 },
				{ 0x0004081020002000, 0x00000a5840208020u,  33216 },
				{ 0x0008102040004000, 0x0000058408404010u,  17127 },
				{ 0x0008040200020400, 0x0002022000408020u,   6397 },
				{ 0x0010080400040800, 0x0000402000408080u,  22169 },
				{ 0x0020100a000a1000, 0x0000804000810100u,  42727 },
				{ 0x0040221400142200, 0x000100403c0403ffu,    155 },
				{ 0x0002442800284400, 0x00078402a8802000u,   8601 },
				{ 0x0004085000500800, 0x0000101000804400u,  21101 },
				{ 0x0008102000201000, 0x0000080800104100u,  29885 },
				{ 0x0010204000402000, 0x0000400480101008u,  29340 },
				{ 0x0004020002040800, 0x0001010102004040u,  19785 },
				{ 0x0008040004081000, 0x0000808090402020u,  12258 },
				{ 0x00100a000a102000, 0x0007fefe08810010u,  50451 },
				{ 0x0022140014224000, 0x0003ff0f833fc080u,   1712 },
				{ 0x0044280028440200, 0x007fe08019003042u,  78475 },
				{ 0x0008500050080400, 0x0000202040008040u,   7855 },
				{ 0x0010200020100800, 0x0001004008381008u,  13642 },
				{ 0x0020400040201000, 0x0000802003700808u,   8156 },
				{ 0x0002000204081000, 0x0000208200400080u,   4348 },
				{ 0x0004000408102000, 0x0000104100200040u,  28794 },
				{ 0x000a000a10204000, 0x0003ffdf7f833fc0u,  22578 },
				{ 0x0014001422400000, 0x0000008840450020u,  50315 },
				{ 0x0028002844020000, 0x0000020040100100u,  85452 },
				{ 0x0050005008040200, 0x007fffdd80140028u,  32816 },
				{ 0x0020002010080400, 0x0000202020200040u,  13930 },
				{ 0x0040004020100800, 0x0001004010039004u,  17967 },
				{ 0x0000020408102000, 0x0000040041008000u,  33200 },
				{ 0x0000040810204000, 0x0003ffefe0c02200u,  32456 },
				{ 0x00000a1020400000, 0x0000001010806000u,   7762 },
				{ 0x0000142240000000, 0x0000000008403000u,   7794 },
				{ 0x0000284402000000, 0x0000000100202000u,  22761 },
				{ 0x0000500804020000, 0x0000040100200800u,  14918 },
				{ 0x0000201008040200, 0x0000404040404000u,  11620 },
				{ 0x0000402010080400, 0x00006020601803f4u,  15925 },
				{ 0x0002040810204000, 0x0003ffdfdfc28048u,  32528 },
				{ 0x0004081020400000, 0x0000000820820020u,  12196 },
				{ 0x000a102040000000, 0x0000000010108060u,  32720 },
				{ 0x0014224000000000, 0x0000000000084030u,  26781 },
				{ 0x0028440200000000, 0x0000000001002020u,  19817 },
				{ 0x0050080402000000, 0x0000000040408020u,  24732 },
				{ 0x0020100804020000, 0x0000004040404040u,  25468 },
				{ 0x0040201008040200, 0x0000404040404040u,  10186 }
			};

			inline constexpr Magic rook_magics[64] =
			{
				{ 0x000101010101017e,  0x00280077ffebfffeu,  41305 },
				{ 0x000202020202027c,  0x2004010201097fffu,  14326 },
				{ 0x000404040404047a,  0x0010020010053fffu,  24477 },
				{ 0x0008080808080876,  0x0030002ff71ffffau,   8223 },
				{ 0x001010101010106e,  0x7fd00441ffffd003u,  49795 },
				{ 0x002020202020205e,  0x004001d9e03ffff7u,  60546 },
				{ 0x004040404040403e,  0x004000888847ffffu,  28543 },
				{ 0x008080808080807e,  0x006800fbff75fffdu,  79282 },
				{ 0x0001010101017e00,  0x000028010113ffffu,   6457 },
				{ 0x0002020202027c00,  0x0020040201fcffffu,   4125 },
				{ 0x0004040404047a00,  0x007fe80042ffffe8u,  81021 },
				{ 0x0008080808087600,  0x00001800217fffe8u,  42341 },
				{ 0x0010101010106e00,  0x00001800073fffe8u,  14139 },
				{ 0x0020202020205e00,  0x007fe8009effffe8u,  19465 },
				{ 0x0040404040403e00,  0x00001800602fffe8u,   9514 },
				{ 0x0080808080807e00,  0x000030002fffffa0u,  71090 },
				{ 0x00010101017e0100,  0x00300018010bffffu,  75419 },
				{ 0x00020202027c0200,  0x0003000c0085fffbu,  33476 },
				{ 0x00040404047a0400,  0x0004000802010008u,  27117 },
				{ 0x0008080808760800,  0x0002002004002002u,  85964 },
				{ 0x00101010106e1000,  0x0002002020010002u,  54915 },
				{ 0x00202020205e2000,  0x0001002020008001u,  36544 },
				{ 0x00404040403e4000,  0x0000004040008001u,  71854 },
				{ 0x00808080807e8000,  0x0000802000200040u,  37996 },
				{ 0x000101017e010100,  0x0040200010080010u,  30398 },
				{ 0x000202027c020200,  0x0000080010040010u,  55939 },
				{ 0x000404047a040400,  0x0004010008020008u,  53891 },
				{ 0x0008080876080800,  0x0000040020200200u,  56963 },
				{ 0x001010106e101000,  0x0000010020020020u,  77451 },
				{ 0x002020205e202000,  0x0000010020200080u,  12319 },
				{ 0x004040403e404000,  0x0000008020200040u,  88500 },
				{ 0x008080807e808000,  0x0000200020004081u,  51405 },
				{ 0x0001017e01010100,  0x00fffd1800300030u,  72878 },
				{ 0x0002027c02020200,  0x007fff7fbfd40020u,    676 },
				{ 0x0004047a04040400,  0x003fffbd00180018u,  83122 },
				{ 0x0008087608080800,  0x001fffde80180018u,  22206 },
				{ 0x0010106e10101000,  0x000fffe0bfe80018u,  75186 },
				{ 0x0020205e20202000,  0x0001000080202001u,    681 },
				{ 0x0040403e40404000,  0x0003fffbff980180u,  36453 },
				{ 0x0080807e80808000,  0x0001fffdff9000e0u,  20369 },
				{ 0x00017e0101010100,  0x00fffeebfeffd800u,   1981 },
				{ 0x00027c0202020200,  0x007ffff7ffc01400u,  13343 },
				{ 0x00047a0404040400,  0x0000408104200204u,  10650 },
				{ 0x0008760808080800,  0x001ffff01fc03000u,  57987 },
				{ 0x00106e1010101000,  0x000fffe7f8bfe800u,  26302 },
				{ 0x00205e2020202000,  0x0000008001002020u,  58357 },
				{ 0x00403e4040404000,  0x0003fff85fffa804u,  40546 },
				{ 0x00807e8080808000,  0x0001fffd75ffa802u,      0 },
				{ 0x007e010101010100,  0x00ffffec00280028u,  14967 },
				{ 0x007c020202020200,  0x007fff75ff7fbfd8u,  80361 },
				{ 0x007a040404040400,  0x003fff863fbf7fd8u,  40905 },
				{ 0x0076080808080800,  0x001fffbfdfd7ffd8u,  58347 },
				{ 0x006e101010101000,  0x000ffff810280028u,  20381 },
				{ 0x005e202020202000,  0x0007ffd7f7feffd8u,  81868 },
				{ 0x003e404040404000,  0x0003fffc0c480048u,  59381 },
				{ 0x007e808080808000,  0x0001ffffafd7ffd8u,  84404 },
				{ 0x7e01010101010100,  0x00ffffe4ffdfa3bau,  45811 },
				{ 0x7c02020202020200,  0x007fffef7ff3d3dau,  62898 },
				{ 0x7a04040404040400,  0x003fffbfdfeff7fau,  45796 },
				{ 0x7608080808080800,  0x001fffeff7fbfc22u,  66994 },
				{ 0x6e10101010101000,  0x0000020408001001u,  67204 },
				{ 0x5e20202020202000,  0x0007fffeffff77fdu,  32448 },
				{ 0x3e40404040404000,  0x0003ffffbf7dfeecu,  62946 },
				{ 0x7e80808080808000,  0x0001ffff9dffa333u,  17005 },
			};

		} // namespace magics


		extern Bitboard _slider_attacks[89524];
		extern Bitboard _knight_attacks[64];
		extern Bitboard _king_attacks[64];
		extern Bitboard _pawn_attacks[2][64];
		extern Bitboard _in_between[64][64];

		void InitAttacks();
		Bitboard RookAttacksSlow(Square sq, Bitboard relevant_occ);
		Bitboard BishopAttacksSlow(Square sq, Bitboard relevant_occ);

		template <int side>
		force_inline Bitboard PawnAttacks(Square sq)
		{
			return _pawn_attacks[side][sq];
		}

		force_inline Bitboard PawnAttacks(Square sq, Side attacking_side)
		{
			return _pawn_attacks[attacking_side][sq];
		}

		// returns the attack map for a knight on the given square
		force_inline Bitboard KnightAttacks(Square sq)
		{
			return _knight_attacks[sq];
		}

		// returns the attack map for a king on the given square
		force_inline Bitboard KingAttacks(Square sq)
		{
			return _king_attacks[sq];
		}

		force_inline Bitboard BishopAttacks(Square square, u64 occupancy)
		{
			occupancy &= magics::bishop_magics[square].mask;
			occupancy *= magics::bishop_magics[square].magic_factor;
			occupancy >>= (64 - 9);
			return _slider_attacks[magics::bishop_magics[square].table_offset + occupancy];
		}

		force_inline Bitboard RookAttacks(Square square, u64 occupancy)
		{
			occupancy &= magics::rook_magics[square].mask;
			occupancy *= magics::rook_magics[square].magic_factor;
			occupancy >>= (64 - 12);
			return _slider_attacks[magics::rook_magics[square].table_offset + occupancy];
		}

		force_inline Bitboard QueenAttacks(Square square, u64 occupancy)
		{
			return BishopAttacks(square, occupancy) | RookAttacks(square, occupancy);
		}

		force_inline Bitboard InBetween(Square from, Square to)
		{
			return _in_between[from][to];
		}

	} // namespace attacks
} // namespace anka